{"mappings":"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","sources":["<anon>","script.js"],"sourcesContent":["const STATUS_FLOW = [\n    \"Read it\",\n    \"Not read\",\n    \"Just reading\"\n];\nconst STORAGE_KEY = \"bookshelf:data:v1\";\nconst selectors = {\n    addBookButton: document.getElementById(\"addBookBtn\"),\n    modal: document.getElementById(\"BookModal\"),\n    overlay: document.getElementById(\"overlay\"),\n    closeModalButton: document.getElementById(\"closeModalButton\"),\n    library: document.getElementById(\"library\"),\n    form: document.getElementById(\"addBookForm\"),\n    statusDefault: document.getElementById(\"reading\")\n};\nfunction createId() {\n    if (window.crypto?.randomUUID) return window.crypto.randomUUID();\n    return `book-${Date.now()}-${Math.random().toString(16).slice(2)}`;\n}\nfunction sanitizeText(value) {\n    return value.trim();\n}\nfunction normalizePages(pages) {\n    const parsed = Number(pages);\n    return Number.isFinite(parsed) && parsed > 0 ? parsed : 0;\n}\nfunction getNextStatus(status) {\n    const index = STATUS_FLOW.indexOf(status);\n    if (index === -1) return STATUS_FLOW[0];\n    return STATUS_FLOW[(index + 1) % STATUS_FLOW.length];\n}\nclass Book {\n    constructor({ id = createId(), title, author, pages, status }){\n        this.id = id;\n        this.title = sanitizeText(title);\n        this.author = sanitizeText(author);\n        this.pages = normalizePages(pages);\n        this.status = STATUS_FLOW.includes(status) ? status : STATUS_FLOW[0];\n    }\n    toggleStatus() {\n        this.status = getNextStatus(this.status);\n    }\n    toJSON() {\n        return {\n            id: this.id,\n            title: this.title,\n            author: this.author,\n            pages: this.pages,\n            status: this.status\n        };\n    }\n}\nclass Library {\n    constructor(storageKey = STORAGE_KEY){\n        this.storageKey = storageKey;\n        this.shelf = [];\n    }\n    load(defaultBooks = []) {\n        const storedBooks = localStorage.getItem(this.storageKey);\n        if (!storedBooks) {\n            this.shelf = defaultBooks.map((book)=>new Book(book));\n            this.persist();\n            return;\n        }\n        try {\n            const parsed = JSON.parse(storedBooks);\n            this.shelf = Array.isArray(parsed) ? parsed.map((book)=>new Book(book)) : [];\n        } catch (error) {\n            console.error(\"Failed to parse saved library data:\", error);\n            this.shelf = [];\n        }\n    }\n    persist() {\n        localStorage.setItem(this.storageKey, JSON.stringify(this.shelf));\n    }\n    add(bookData) {\n        const book = bookData instanceof Book ? bookData : new Book(bookData);\n        this.shelf.push(book);\n        this.persist();\n        return book;\n    }\n    remove(bookId) {\n        const previousLength = this.shelf.length;\n        this.shelf = this.shelf.filter((book)=>book.id !== bookId);\n        if (this.shelf.length !== previousLength) {\n            this.persist();\n            return true;\n        }\n        return false;\n    }\n    updateStatus(bookId) {\n        const book = this.find(bookId);\n        if (!book) return null;\n        book.toggleStatus();\n        this.persist();\n        return book;\n    }\n    find(bookId) {\n        return this.shelf.find((book)=>book.id === bookId) ?? null;\n    }\n    isEmpty() {\n        return this.shelf.length === 0;\n    }\n}\nconst library = new Library();\nconst DEFAULT_BOOKS = [\n    {\n        title: \"Beksinski Fotografia\",\n        author: \"Wieslaw Banach\",\n        pages: 64,\n        status: \"Read it\"\n    },\n    {\n        title: \"Alexander Lowen\",\n        author: \"Rado\\u015B\\u0107\",\n        pages: 327,\n        status: \"Just reading\"\n    },\n    {\n        title: \"Iron John\",\n        author: \"Robert Bly\",\n        pages: 264,\n        status: \"Not read\"\n    }\n];\nlibrary.load(DEFAULT_BOOKS);\nfunction openModal() {\n    selectors.form.reset();\n    selectors.statusDefault.checked = true;\n    selectors.modal.classList.add(\"active\");\n    selectors.overlay.classList.add(\"active\");\n}\nfunction closeModal() {\n    selectors.modal.classList.remove(\"active\");\n    selectors.overlay.classList.remove(\"active\");\n}\nfunction handleOverlayClick() {\n    closeModal();\n}\nfunction handleEscapeKey(event) {\n    if (event.key === \"Escape\" && selectors.modal.classList.contains(\"active\")) closeModal();\n}\nfunction createEmptyState() {\n    const emptyState = document.createElement(\"div\");\n    emptyState.className = \"card empty-state\";\n    emptyState.innerHTML = `<p>No books on the shelf yet.</p><p>Add your first book to get started!</p>`;\n    return emptyState;\n}\nfunction createBookCard(book) {\n    const card = document.createElement(\"div\");\n    card.className = \"card\";\n    card.dataset.bookId = book.id;\n    const title = document.createElement(\"p\");\n    title.className = \"card-title\";\n    title.textContent = `\"${book.title}\"`;\n    const author = document.createElement(\"p\");\n    author.className = \"card-author\";\n    author.textContent = `by ${book.author}`;\n    const pages = document.createElement(\"p\");\n    pages.className = \"card-pages\";\n    pages.textContent = `${book.pages} ${book.pages === 1 ? \"page\" : \"pages\"}`;\n    const statusContainer = document.createElement(\"div\");\n    statusContainer.className = \"status-container\";\n    const status = document.createElement(\"p\");\n    status.className = \"card-status\";\n    status.textContent = book.status;\n    const changeStatusButton = document.createElement(\"button\");\n    changeStatusButton.className = \"change-status-button\";\n    changeStatusButton.textContent = \"Change status\";\n    changeStatusButton.dataset.action = \"toggle-status\";\n    statusContainer.append(status, changeStatusButton);\n    const removeButton = document.createElement(\"button\");\n    removeButton.className = \"remove-button\";\n    removeButton.textContent = \"Remove book\";\n    removeButton.dataset.action = \"remove\";\n    card.append(title, author, pages, statusContainer, removeButton);\n    return card;\n}\nfunction renderLibrary() {\n    selectors.library.innerHTML = \"\";\n    if (library.isEmpty()) {\n        selectors.library.appendChild(createEmptyState());\n        return;\n    }\n    const fragment = document.createDocumentFragment();\n    library.shelf.forEach((book)=>{\n        fragment.appendChild(createBookCard(book));\n    });\n    selectors.library.appendChild(fragment);\n}\nfunction handleLibraryClick(event) {\n    const button = event.target.closest(\"button\");\n    if (!button) return;\n    const card = button.closest(\".card\");\n    if (!card) return;\n    const { bookId } = card.dataset;\n    const { action } = button.dataset;\n    if (!bookId || !action) return;\n    if (action === \"toggle-status\") {\n        library.updateStatus(bookId);\n        renderLibrary();\n        return;\n    }\n    if (action === \"remove\") {\n        library.remove(bookId);\n        renderLibrary();\n    }\n}\nfunction handleFormSubmit(event) {\n    event.preventDefault();\n    if (!selectors.form.reportValidity()) return;\n    const formData = new FormData(selectors.form);\n    const title = formData.get(\"title\");\n    const author = formData.get(\"author\");\n    const pages = formData.get(\"pages\");\n    const status = formData.get(\"status\");\n    library.add({\n        title,\n        author,\n        pages,\n        status\n    });\n    renderLibrary();\n    closeModal();\n}\nselectors.addBookButton.addEventListener(\"click\", openModal);\nselectors.overlay.addEventListener(\"click\", handleOverlayClick);\nselectors.closeModalButton.addEventListener(\"click\", (event)=>{\n    event.preventDefault();\n    closeModal();\n});\nselectors.library.addEventListener(\"click\", handleLibraryClick);\nselectors.form.addEventListener(\"submit\", handleFormSubmit);\ndocument.addEventListener(\"keydown\", handleEscapeKey);\nrenderLibrary();\n\n//# sourceMappingURL=library-project.8a8967f4.js.map\n","const STATUS_FLOW = [\"Read it\", \"Not read\", \"Just reading\"];\nconst STORAGE_KEY = \"bookshelf:data:v1\";\n\nconst selectors = {\n  addBookButton: document.getElementById(\"addBookBtn\"),\n  modal: document.getElementById(\"BookModal\"),\n  overlay: document.getElementById(\"overlay\"),\n  closeModalButton: document.getElementById(\"closeModalButton\"),\n  library: document.getElementById(\"library\"),\n  form: document.getElementById(\"addBookForm\"),\n  statusDefault: document.getElementById(\"reading\"),\n};\n\nfunction createId() {\n  if (window.crypto?.randomUUID) {\n    return window.crypto.randomUUID();\n  }\n\n  return `book-${Date.now()}-${Math.random().toString(16).slice(2)}`;\n}\n\nfunction sanitizeText(value) {\n  return value.trim();\n}\n\nfunction normalizePages(pages) {\n  const parsed = Number(pages);\n  return Number.isFinite(parsed) && parsed > 0 ? parsed : 0;\n}\n\nfunction getNextStatus(status) {\n  const index = STATUS_FLOW.indexOf(status);\n  if (index === -1) {\n    return STATUS_FLOW[0];\n  }\n\n  return STATUS_FLOW[(index + 1) % STATUS_FLOW.length];\n}\n\nclass Book {\n  constructor({ id = createId(), title, author, pages, status }) {\n    this.id = id;\n    this.title = sanitizeText(title);\n    this.author = sanitizeText(author);\n    this.pages = normalizePages(pages);\n    this.status = STATUS_FLOW.includes(status) ? status : STATUS_FLOW[0];\n  }\n\n  toggleStatus() {\n    this.status = getNextStatus(this.status);\n  }\n\n  toJSON() {\n    return {\n      id: this.id,\n      title: this.title,\n      author: this.author,\n      pages: this.pages,\n      status: this.status,\n    };\n  }\n}\n\nclass Library {\n  constructor(storageKey = STORAGE_KEY) {\n    this.storageKey = storageKey;\n    this.shelf = [];\n  }\n\n  load(defaultBooks = []) {\n    const storedBooks = localStorage.getItem(this.storageKey);\n\n    if (!storedBooks) {\n      this.shelf = defaultBooks.map((book) => new Book(book));\n      this.persist();\n      return;\n    }\n\n    try {\n      const parsed = JSON.parse(storedBooks);\n      this.shelf = Array.isArray(parsed)\n        ? parsed.map((book) => new Book(book))\n        : [];\n    } catch (error) {\n      console.error(\"Failed to parse saved library data:\", error);\n      this.shelf = [];\n    }\n  }\n\n  persist() {\n    localStorage.setItem(this.storageKey, JSON.stringify(this.shelf));\n  }\n\n  add(bookData) {\n    const book = bookData instanceof Book ? bookData : new Book(bookData);\n    this.shelf.push(book);\n    this.persist();\n    return book;\n  }\n\n  remove(bookId) {\n    const previousLength = this.shelf.length;\n    this.shelf = this.shelf.filter((book) => book.id !== bookId);\n\n    if (this.shelf.length !== previousLength) {\n      this.persist();\n      return true;\n    }\n\n    return false;\n  }\n\n  updateStatus(bookId) {\n    const book = this.find(bookId);\n    if (!book) {\n      return null;\n    }\n\n    book.toggleStatus();\n    this.persist();\n    return book;\n  }\n\n  find(bookId) {\n    return this.shelf.find((book) => book.id === bookId) ?? null;\n  }\n\n  isEmpty() {\n    return this.shelf.length === 0;\n  }\n}\n\nconst library = new Library();\n\nconst DEFAULT_BOOKS = [\n  {\n    title: \"Beksinski Fotografia\",\n    author: \"Wieslaw Banach\",\n    pages: 64,\n    status: \"Read it\",\n  },\n  {\n    title: \"Alexander Lowen\",\n    author: \"Radość\",\n    pages: 327,\n    status: \"Just reading\",\n  },\n  {\n    title: \"Iron John\",\n    author: \"Robert Bly\",\n    pages: 264,\n    status: \"Not read\",\n  },\n];\n\nlibrary.load(DEFAULT_BOOKS);\n\nfunction openModal() {\n  selectors.form.reset();\n  selectors.statusDefault.checked = true;\n  selectors.modal.classList.add(\"active\");\n  selectors.overlay.classList.add(\"active\");\n}\n\nfunction closeModal() {\n  selectors.modal.classList.remove(\"active\");\n  selectors.overlay.classList.remove(\"active\");\n}\n\nfunction handleOverlayClick() {\n  closeModal();\n}\n\nfunction handleEscapeKey(event) {\n  if (event.key === \"Escape\" && selectors.modal.classList.contains(\"active\")) {\n    closeModal();\n  }\n}\n\nfunction createEmptyState() {\n  const emptyState = document.createElement(\"div\");\n  emptyState.className = \"card empty-state\";\n  emptyState.innerHTML = `<p>No books on the shelf yet.</p><p>Add your first book to get started!</p>`;\n  return emptyState;\n}\n\nfunction createBookCard(book) {\n  const card = document.createElement(\"div\");\n  card.className = \"card\";\n  card.dataset.bookId = book.id;\n\n  const title = document.createElement(\"p\");\n  title.className = \"card-title\";\n  title.textContent = `\"${book.title}\"`;\n\n  const author = document.createElement(\"p\");\n  author.className = \"card-author\";\n  author.textContent = `by ${book.author}`;\n\n  const pages = document.createElement(\"p\");\n  pages.className = \"card-pages\";\n  pages.textContent = `${book.pages} ${book.pages === 1 ? \"page\" : \"pages\"}`;\n\n  const statusContainer = document.createElement(\"div\");\n  statusContainer.className = \"status-container\";\n\n  const status = document.createElement(\"p\");\n  status.className = \"card-status\";\n  status.textContent = book.status;\n\n  const changeStatusButton = document.createElement(\"button\");\n  changeStatusButton.className = \"change-status-button\";\n  changeStatusButton.textContent = \"Change status\";\n  changeStatusButton.dataset.action = \"toggle-status\";\n\n  statusContainer.append(status, changeStatusButton);\n\n  const removeButton = document.createElement(\"button\");\n  removeButton.className = \"remove-button\";\n  removeButton.textContent = \"Remove book\";\n  removeButton.dataset.action = \"remove\";\n\n  card.append(title, author, pages, statusContainer, removeButton);\n  return card;\n}\n\nfunction renderLibrary() {\n  selectors.library.innerHTML = \"\";\n\n  if (library.isEmpty()) {\n    selectors.library.appendChild(createEmptyState());\n    return;\n  }\n\n  const fragment = document.createDocumentFragment();\n  library.shelf.forEach((book) => {\n    fragment.appendChild(createBookCard(book));\n  });\n  selectors.library.appendChild(fragment);\n}\n\nfunction handleLibraryClick(event) {\n  const button = event.target.closest(\"button\");\n  if (!button) {\n    return;\n  }\n\n  const card = button.closest(\".card\");\n  if (!card) {\n    return;\n  }\n\n  const { bookId } = card.dataset;\n  const { action } = button.dataset;\n\n  if (!bookId || !action) {\n    return;\n  }\n\n  if (action === \"toggle-status\") {\n    library.updateStatus(bookId);\n    renderLibrary();\n    return;\n  }\n\n  if (action === \"remove\") {\n    library.remove(bookId);\n    renderLibrary();\n  }\n}\n\nfunction handleFormSubmit(event) {\n  event.preventDefault();\n\n  if (!selectors.form.reportValidity()) {\n    return;\n  }\n\n  const formData = new FormData(selectors.form);\n  const title = formData.get(\"title\");\n  const author = formData.get(\"author\");\n  const pages = formData.get(\"pages\");\n  const status = formData.get(\"status\");\n\n  library.add({ title, author, pages, status });\n  renderLibrary();\n  closeModal();\n}\n\nselectors.addBookButton.addEventListener(\"click\", openModal);\nselectors.overlay.addEventListener(\"click\", handleOverlayClick);\nselectors.closeModalButton.addEventListener(\"click\", (event) => {\n  event.preventDefault();\n  closeModal();\n});\nselectors.library.addEventListener(\"click\", handleLibraryClick);\nselectors.form.addEventListener(\"submit\", handleFormSubmit);\ndocument.addEventListener(\"keydown\", handleEscapeKey);\n\nrenderLibrary();\n"],"names":["STATUS_FLOW","STORAGE_KEY","selectors","addBookButton","document","getElementById","modal","overlay","closeModalButton","library","form","statusDefault","createId","window","crypto","randomUUID","Date","now","Math","random","toString","slice","sanitizeText","value","trim","normalizePages","pages","parsed","Number","isFinite","getNextStatus","status","index","indexOf","length","Book","id","title","author","includes","toggleStatus","toJSON","Library","storageKey","shelf","load","defaultBooks","storedBooks","localStorage","getItem","map","book","persist","JSON","parse","Array","isArray","error","console","setItem","stringify","add","bookData","push","remove","bookId","previousLength","filter","updateStatus","find","isEmpty","DEFAULT_BOOKS","openModal","reset","checked","classList","closeModal","handleOverlayClick","handleEscapeKey","event","key","contains","createEmptyState","emptyState","createElement","className","innerHTML","createBookCard","card","dataset","textContent","statusContainer","changeStatusButton","action","append","removeButton","renderLibrary","appendChild","fragment","createDocumentFragment","forEach","handleLibraryClick","button","target","closest","handleFormSubmit","preventDefault","reportValidity","formData","FormData","get","addEventListener"],"version":3,"file":"library-project.8a8967f4.js.map"}